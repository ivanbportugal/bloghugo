[{"content":" by Ivan Portugal\n ","href":"/","title":"Home"},{"content":" Goals To continue to cultivate my passion for web technologies and make a tremendous impact wherever I work.\nRealm of Technical Knowledge    Front End Back End Database     Angular Java Oracle   HTML5 Spring Boot SQL Server   SASS C# BoltDB   CSS3 .NETMVC CockroachDB   Ionic Maven    Flutter Jenkins    PWA GoLang     Confidence Levels Over Time { \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;2008\u0026#34;, \u0026#34;2010\u0026#34;, \u0026#34;2012\u0026#34;, \u0026#34;2014\u0026#34;, \u0026#34;2016\u0026#34;, \u0026#34;2018\u0026#34;], \u0026#34;datasets\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;Java Services\u0026#34;, \u0026#34;data\u0026#34;: [1, 4, 5, 6, 7, 9], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;blue\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Java Swing\u0026#34;, \u0026#34;data\u0026#34;: [0.1, 1, 7, 7, 7, 7], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;orange\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;HTML5, CSS3, JavaScript\u0026#34;, \u0026#34;data\u0026#34;: [0.2, 0.2, 5, 9.9, 9.9, 9.9], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;red\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;.NETMVC / WebAPI\u0026#34;, \u0026#34;data\u0026#34;: [0, 0, 0, 0, 4, 8], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;magenta\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Angular\u0026#34;, \u0026#34;data\u0026#34;: [0, 0, 0, 5, 10, 10], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;green\u0026#34; } ] } }","href":"/about/","title":"About"},{"content":"I have always found that learning Git was easier with a GUI but I always seemed to keep hitting some sort of \u0026ldquo;capability ceiling\u0026rdquo;\u0026hellip; There are several out there and I particularly enjoyed SourceTree from Atlassian and GitKraken from Axosoft. Here are some others: Git Guis\nHowever, the command line is significantly more powerful. Here is a handy-fancy git log with a graph. Add this to your .gitconfig:\n[alias] lg1 = log --graph --all --format=format:\u0026#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)\u0026#39; --abbrev-commit --date=relative lg2 = log --graph --all --format=format:\u0026#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n\u0026#39;\u0026#39; %C(white)%s%C(reset) %C(bold white)— %an%C(reset)\u0026#39; --abbrev-commit Then, try it out! 😋\ngit lg1 ","href":"/post/git-log-goodies/","title":"Git Log Goodies"},{"content":" Intro After getting introduced to Go, I\u0026rsquo;ve fallen in love\u0026hellip; Without making this corny, I really wanted to explore what the platform/language can do immediately. I\u0026rsquo;m sorta done with Hello World projects and going through examples of the language so I\u0026rsquo;d like to present a more-or-less real-world example.\nTechnologies used: - Go - Martini - Nodejs - Grunt - Bower\nPseudo real-world Go Project\nWhy Nodejs too? I love web technologies. Nodejs has shaped how easy it is to develop projects for the web, including facilitating and supporting popular tools (via Github) like Grunt, Gulp, Bower, SASS, AngularJS, etc\u0026hellip; Since I really like client-side development and I am a huge fan of AngularJS, I decided to make sure that whatever I came up with had this in mind.\nSince Go runs and deploys very simply, it shouldn\u0026rsquo;t be difficult to just incorporate it into a nice client-side workflow. So, here\u0026rsquo;s a brief explanation of what I decided to do. I guess you could just click on the Github link above and not read on any further :(\nMartini After wrestling a teeny bit with the net/http package, I decided to go with a nice router that was fairly-well accepted by the community. It seemed to provide nice facilities for auth too. Here\u0026rsquo;s a snippet of the routing syntax:\n// Sets up reasonable defaults for your web app var m = martini.Classic() // CRUDL! Just pass in a callback m.Get(`/albums`, server.GetAlbums) m.Get(`/albums/:id`, server.GetAlbum) m.Post(`/albums`, server.AddAlbum) m.Put(`/albums/:id`, server.UpdateAlbum) m.Delete(`/albums/:id`, server.DeleteAlbum) // Inject database m.MapTo(server.DBInstance, (*server.DB)(nil)) // Add the router action m.Action(r.Handle) // GetAlbums might look like this func GetAlbums(r *http.Request, enc Encoder, db DB) string { // Get the query string arguments, if any \tqs := r.URL.Query() band, title, yrs := qs.Get(\u0026#34;band\u0026#34;), qs.Get(\u0026#34;title\u0026#34;), qs.Get(\u0026#34;year\u0026#34;) yri, err := strconv.Atoi(yrs) if err != nil { // If year is not a valid integer, ignore it \tyri = 0 } if band != \u0026#34;\u0026#34; || title != \u0026#34;\u0026#34; || yri != 0 { // At least one filter, use Find() \treturn Must(enc.Encode(toIface(db.Find(band, title, yri))...)) } // Otherwise, return all albums \treturn Must(enc.Encode(toIface(db.GetAll())...)) } The important thing to note here is that the GetAlbums function takes in a db as a parameter because it\u0026rsquo;s \u0026ldquo;injected\u0026rdquo; by the MapTo function. Perhaps Go has dependency injection out of the box that I haven\u0026rsquo;t used but this feature is pretty useful, especially if I\u0026rsquo;d like to swap out for a different database in the future.\nNodejs Obviously Go does everything for the server so I just need a good client-side workflow. Nodejs is only used for development in this project. Grunt is used to configure different tasks as you might expect for minifying resources, launching live reload, etc\u0026hellip; Bower manages clients-side dependencies. Examples of this are littered all over the web so I won\u0026rsquo;t be discussing this except for the Go part.\nHere\u0026rsquo;s a Gruntfile.js snippet:\ngrunt.initConfig({ goserver: { options: { // Port 3001 is HTTPS enforced  port: 3000, // Change this to \u0026#39;0.0.0.0\u0026#39; to access the server from outside.  hostname: \u0026#39;localhost\u0026#39; }, livereload: { options: { staticDirs: [\u0026#39;.tmp\u0026#39;, yeomanConfig.app] } }, test: { options: { port: 3002, staticDirs: [\u0026#39;.tmp\u0026#39;, \u0026#39;test\u0026#39;] } }, dist: { options: { port: 3003, dist: \u0026#39;\u0026lt;%= gobuild.dist.options.dist %\u0026gt;\u0026#39;, staticDirs: [yeomanConfig.dist] } } } }); function runGo(cmd, args, opts, done) { args.push(\u0026#39;-p\u0026#39;, opts.port); args.push(\u0026#39;-h\u0026#39;, opts.hostname); for (var i = 0; i \u0026lt; opts.staticDirs.length - 1; i++) { args.push(\u0026#39;-static_dir\u0026#39;, opts.staticDirs[i]); } if (opts.staticDirs.length \u0026gt; 0) { args.push(opts.staticDirs[opts.staticDirs.length - 1]); } var goProcess = grunt.util.spawn({ cmd: cmd, args: args, opts: { stdio: \u0026#39;pipe\u0026#39; } }, function(error, result, code) { if (error) { grunt.log.error(String(result)); grunt.fail.fatal(\u0026#39;go-server exited with code: \u0026#39; + code, 3); } } ); goProcess.stdout.pipe(process.stdout); goProcess.stderr.pipe(process.stderr); // Wait for spawned server to print something  goProcess.stdout.once(\u0026#39;data\u0026#39;, function() { done(); }); process.on(\u0026#39;exit\u0026#39;, function() { grunt.log.writeln(\u0026#39;Killing go-server(\u0026#39; + goProcess.pid + \u0026#39;)...\u0026#39;); process.kill(-process.pid, \u0026#39;SIGINT\u0026#39;); grunt.log.oklns(\u0026#39;Killed go-server\u0026#39;); }); } grunt.registerMultiTask(\u0026#39;goserver\u0026#39;, \u0026#39;Running go server\u0026#39;, function() { var opts = this.options({ port: 9000, hostname: \u0026#39;localhost\u0026#39;, }); if (opts.dist) { this.async(); // wait forever to keep the server alive  runGo(opts.dist, [], opts, function() {}); } else { runGo(\u0026#39;go\u0026#39;, [\u0026#39;run\u0026#39;, \u0026#39;main.go\u0026#39;], opts, this.async()); } }); grunt.registerMultiTask(\u0026#39;gobuild\u0026#39;, \u0026#39;Building go server\u0026#39;, function() { var opts = this.options({ dist: \u0026#39;./main\u0026#39;, flags: [], }); var done = this.async(); grunt.util.spawn({ cmd: \u0026#39;go\u0026#39;, args: [\u0026#39;build\u0026#39;, \u0026#39;-o\u0026#39;, opts.dist].concat(opts.flags), opts: { stdio: \u0026#39;inherit\u0026#39; } }, function(error, result, code) { if (error) { grunt.log.error(String(result)); grunt.fail.fatal(\u0026#39;go-build exited with code: \u0026#39; + code, 3); } else { done(); } } ); });  Ok that was alot of code. Basically, it just ties Go executions and builds to the Grunt lifecycle. I had some help from other Github projects to put this together.\nAngularJS Yeah, I\u0026rsquo;m an AngularJS (1.x) guy. I really could care less for server-side rendering for most apps because I feel that as browsers get better and better and devices get faster and faster, we can just let rendering be the responsibility of the client. I hate mudding the server-side waters sometimes, so my project is going to serve static resources and publish a HTTP RESTful API.\nI suppose this might make it transparent when wanting to hook up different client apps built with/for iOS/Android, Chrome Web, Electron, Thrust (new Go project), etc\u0026hellip;\n$http.get(\u0026#39;/albums\u0026#39;).then(function(data){ // My albums are in JSON  $scope.listings = data; }, function(err){ // Some error happened  });  Conclusion I guess if you\u0026rsquo;re looking for cutting edge server-side web development I think you should Go, with confidence.\nGo Albums\nKudos  Yeoman Angular Go Martini Martini API Example  ","href":"/post/go-kick-the-webs-butt/","title":"Go kick the web's butt"},{"content":"Well it looks like I keep starting new blogs over and over again but really I’m just playing around with what I think is neat. Since I love web technologies, fiddling around with Ghost, Medium, and other “cutting edge” blog platforms is really just a matter of self-discovery. I think I’ve settled on HUGO for the long term but we will see if someone comes up with something truly revolutionary in the future that will force me to reconsider.\nNot that it’s even a big deal anyways since the content of this site/blog is what actually matters\u0026hellip;\nI intend to have random client-side projects linked to this in the future\n","href":"/post/discovery/","title":"Discovery"},{"content":"","href":"/tags/angular/","title":"Angular"},{"content":"","href":"/authors/","title":"Authors"},{"content":"","href":"/tags/blog/","title":"Blog"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/tags/discovery/","title":"Discovery"},{"content":"","href":"/tags/git/","title":"Git"},{"content":"","href":"/tags/golang/","title":"Golang"},{"content":"","href":"/tags/graph/","title":"Graph"},{"content":"","href":"/tags/hugo/","title":"Hugo"},{"content":"","href":"/tags/javascript/","title":"Javascript"},{"content":"","href":"/tags/log/","title":"Log"},{"content":"","href":"/tags/martini/","title":"Martini"},{"content":"","href":"/tags/nodejs/","title":"Nodejs"},{"content":"","href":"/page/","title":"Pages"},{"content":"","href":"/post/","title":"Posts"},{"content":"","href":"/search/","title":"Search"},{"content":"","href":"/series/","title":"Series"},{"content":"","href":"/tags/","title":"Tags"}]
